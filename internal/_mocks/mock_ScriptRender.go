// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import (
	context "context"
	io "io"

	entity "github.com/hernangonzalez1987/scriptBreakdown/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockScriptRender is an autogenerated mock type for the ScriptRender type
type MockScriptRender struct {
	mock.Mock
}

type MockScriptRender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScriptRender) EXPECT() *MockScriptRender_Expecter {
	return &MockScriptRender_Expecter{mock: &_m.Mock}
}

// RenderScript provides a mock function with given fields: ctx, source, target, breakdown
func (_m *MockScriptRender) RenderScript(ctx context.Context, source io.Reader, target io.Writer, breakdown entity.ScriptBreakdown) error {
	ret := _m.Called(ctx, source, target, breakdown)

	if len(ret) == 0 {
		panic("no return value specified for RenderScript")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, io.Writer, entity.ScriptBreakdown) error); ok {
		r0 = rf(ctx, source, target, breakdown)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScriptRender_RenderScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderScript'
type MockScriptRender_RenderScript_Call struct {
	*mock.Call
}

// RenderScript is a helper method to define mock.On call
//   - ctx context.Context
//   - source io.Reader
//   - target io.Writer
//   - breakdown entity.ScriptBreakdown
func (_e *MockScriptRender_Expecter) RenderScript(ctx interface{}, source interface{}, target interface{}, breakdown interface{}) *MockScriptRender_RenderScript_Call {
	return &MockScriptRender_RenderScript_Call{Call: _e.mock.On("RenderScript", ctx, source, target, breakdown)}
}

func (_c *MockScriptRender_RenderScript_Call) Run(run func(ctx context.Context, source io.Reader, target io.Writer, breakdown entity.ScriptBreakdown)) *MockScriptRender_RenderScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(io.Writer), args[3].(entity.ScriptBreakdown))
	})
	return _c
}

func (_c *MockScriptRender_RenderScript_Call) Return(err error) *MockScriptRender_RenderScript_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScriptRender_RenderScript_Call) RunAndReturn(run func(context.Context, io.Reader, io.Writer, entity.ScriptBreakdown) error) *MockScriptRender_RenderScript_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScriptRender creates a new instance of MockScriptRender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScriptRender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScriptRender {
	mock := &MockScriptRender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
