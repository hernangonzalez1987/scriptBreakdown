// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import (
	context "context"

	entity "github.com/hernangonzalez1987/scriptBreakdown/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockSceneBreakdownTagger is an autogenerated mock type for the SceneBreakdownTagger type
type MockSceneBreakdownTagger struct {
	mock.Mock
}

type MockSceneBreakdownTagger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSceneBreakdownTagger) EXPECT() *MockSceneBreakdownTagger_Expecter {
	return &MockSceneBreakdownTagger_Expecter{mock: &_m.Mock}
}

// BreakdownScene provides a mock function with given fields: ctx, tagCategories, scenes, sceneBreakdowns
func (_m *MockSceneBreakdownTagger) BreakdownScene(ctx context.Context, tagCategories entity.TagCategories, scenes <-chan entity.Scene, sceneBreakdowns chan<- entity.SceneBreakdown) error {
	ret := _m.Called(ctx, tagCategories, scenes, sceneBreakdowns)

	if len(ret) == 0 {
		panic("no return value specified for BreakdownScene")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TagCategories, <-chan entity.Scene, chan<- entity.SceneBreakdown) error); ok {
		r0 = rf(ctx, tagCategories, scenes, sceneBreakdowns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSceneBreakdownTagger_BreakdownScene_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BreakdownScene'
type MockSceneBreakdownTagger_BreakdownScene_Call struct {
	*mock.Call
}

// BreakdownScene is a helper method to define mock.On call
//   - ctx context.Context
//   - tagCategories entity.TagCategories
//   - scenes <-chan entity.Scene
//   - sceneBreakdowns chan<- entity.SceneBreakdown
func (_e *MockSceneBreakdownTagger_Expecter) BreakdownScene(ctx interface{}, tagCategories interface{}, scenes interface{}, sceneBreakdowns interface{}) *MockSceneBreakdownTagger_BreakdownScene_Call {
	return &MockSceneBreakdownTagger_BreakdownScene_Call{Call: _e.mock.On("BreakdownScene", ctx, tagCategories, scenes, sceneBreakdowns)}
}

func (_c *MockSceneBreakdownTagger_BreakdownScene_Call) Run(run func(ctx context.Context, tagCategories entity.TagCategories, scenes <-chan entity.Scene, sceneBreakdowns chan<- entity.SceneBreakdown)) *MockSceneBreakdownTagger_BreakdownScene_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TagCategories), args[2].(<-chan entity.Scene), args[3].(chan<- entity.SceneBreakdown))
	})
	return _c
}

func (_c *MockSceneBreakdownTagger_BreakdownScene_Call) Return(_a0 error) *MockSceneBreakdownTagger_BreakdownScene_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSceneBreakdownTagger_BreakdownScene_Call) RunAndReturn(run func(context.Context, entity.TagCategories, <-chan entity.Scene, chan<- entity.SceneBreakdown) error) *MockSceneBreakdownTagger_BreakdownScene_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSceneBreakdownTagger creates a new instance of MockSceneBreakdownTagger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSceneBreakdownTagger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSceneBreakdownTagger {
	mock := &MockSceneBreakdownTagger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
