// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import (
	context "context"

	entity "github.com/hernangonzalez1987/scriptBreakdown/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockScriptBreakdownUseCase is an autogenerated mock type for the ScriptBreakdownUseCase type
type MockScriptBreakdownUseCase struct {
	mock.Mock
}

type MockScriptBreakdownUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScriptBreakdownUseCase) EXPECT() *MockScriptBreakdownUseCase_Expecter {
	return &MockScriptBreakdownUseCase_Expecter{mock: &_m.Mock}
}

// BreakdownScript provides a mock function with given fields: ctx, event
func (_m *MockScriptBreakdownUseCase) BreakdownScript(ctx context.Context, event entity.ScriptBreakdownEvent) (*entity.ScriptBreakdownResult, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for BreakdownScript")
	}

	var r0 *entity.ScriptBreakdownResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScriptBreakdownEvent) (*entity.ScriptBreakdownResult, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScriptBreakdownEvent) *entity.ScriptBreakdownResult); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ScriptBreakdownResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ScriptBreakdownEvent) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptBreakdownUseCase_BreakdownScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BreakdownScript'
type MockScriptBreakdownUseCase_BreakdownScript_Call struct {
	*mock.Call
}

// BreakdownScript is a helper method to define mock.On call
//   - ctx context.Context
//   - event entity.ScriptBreakdownEvent
func (_e *MockScriptBreakdownUseCase_Expecter) BreakdownScript(ctx interface{}, event interface{}) *MockScriptBreakdownUseCase_BreakdownScript_Call {
	return &MockScriptBreakdownUseCase_BreakdownScript_Call{Call: _e.mock.On("BreakdownScript", ctx, event)}
}

func (_c *MockScriptBreakdownUseCase_BreakdownScript_Call) Run(run func(ctx context.Context, event entity.ScriptBreakdownEvent)) *MockScriptBreakdownUseCase_BreakdownScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ScriptBreakdownEvent))
	})
	return _c
}

func (_c *MockScriptBreakdownUseCase_BreakdownScript_Call) Return(result *entity.ScriptBreakdownResult, err error) *MockScriptBreakdownUseCase_BreakdownScript_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockScriptBreakdownUseCase_BreakdownScript_Call) RunAndReturn(run func(context.Context, entity.ScriptBreakdownEvent) (*entity.ScriptBreakdownResult, error)) *MockScriptBreakdownUseCase_BreakdownScript_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScriptBreakdownUseCase creates a new instance of MockScriptBreakdownUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScriptBreakdownUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScriptBreakdownUseCase {
	mock := &MockScriptBreakdownUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
