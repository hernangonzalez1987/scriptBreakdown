// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import (
	context "context"

	entity "github.com/hernangonzalez1987/scriptBreakdown/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockSceneBreakdownUseCase is an autogenerated mock type for the SceneBreakdownUseCase type
type MockSceneBreakdownUseCase struct {
	mock.Mock
}

type MockSceneBreakdownUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSceneBreakdownUseCase) EXPECT() *MockSceneBreakdownUseCase_Expecter {
	return &MockSceneBreakdownUseCase_Expecter{mock: &_m.Mock}
}

// BreakdownScene provides a mock function with given fields: ctx, tagCategories, scene
func (_m *MockSceneBreakdownUseCase) BreakdownScene(ctx context.Context, tagCategories entity.TagCategories, scene entity.Scene) (*entity.SceneBreakdown, error) {
	ret := _m.Called(ctx, tagCategories, scene)

	if len(ret) == 0 {
		panic("no return value specified for BreakdownScene")
	}

	var r0 *entity.SceneBreakdown
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TagCategories, entity.Scene) (*entity.SceneBreakdown, error)); ok {
		return rf(ctx, tagCategories, scene)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.TagCategories, entity.Scene) *entity.SceneBreakdown); ok {
		r0 = rf(ctx, tagCategories, scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SceneBreakdown)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.TagCategories, entity.Scene) error); ok {
		r1 = rf(ctx, tagCategories, scene)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSceneBreakdownUseCase_BreakdownScene_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BreakdownScene'
type MockSceneBreakdownUseCase_BreakdownScene_Call struct {
	*mock.Call
}

// BreakdownScene is a helper method to define mock.On call
//   - ctx context.Context
//   - tagCategories entity.TagCategories
//   - scene entity.Scene
func (_e *MockSceneBreakdownUseCase_Expecter) BreakdownScene(ctx interface{}, tagCategories interface{}, scene interface{}) *MockSceneBreakdownUseCase_BreakdownScene_Call {
	return &MockSceneBreakdownUseCase_BreakdownScene_Call{Call: _e.mock.On("BreakdownScene", ctx, tagCategories, scene)}
}

func (_c *MockSceneBreakdownUseCase_BreakdownScene_Call) Run(run func(ctx context.Context, tagCategories entity.TagCategories, scene entity.Scene)) *MockSceneBreakdownUseCase_BreakdownScene_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TagCategories), args[2].(entity.Scene))
	})
	return _c
}

func (_c *MockSceneBreakdownUseCase_BreakdownScene_Call) Return(_a0 *entity.SceneBreakdown, _a1 error) *MockSceneBreakdownUseCase_BreakdownScene_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSceneBreakdownUseCase_BreakdownScene_Call) RunAndReturn(run func(context.Context, entity.TagCategories, entity.Scene) (*entity.SceneBreakdown, error)) *MockSceneBreakdownUseCase_BreakdownScene_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSceneBreakdownUseCase creates a new instance of MockSceneBreakdownUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSceneBreakdownUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSceneBreakdownUseCase {
	mock := &MockSceneBreakdownUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
