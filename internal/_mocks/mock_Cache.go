// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import mock "github.com/stretchr/testify/mock"

// MockCache is an autogenerated mock type for the Cache type
type MockCache[T interface{}] struct {
	mock.Mock
}

type MockCache_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCache[T]) EXPECT() *MockCache_Expecter[T] {
	return &MockCache_Expecter[T]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockCache[T]) Get(key string) (*T, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *T
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*T, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *T); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[T interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter[T]) Get(key interface{}) *MockCache_Get_Call[T] {
	return &MockCache_Get_Call[T]{Call: _e.mock.On("Get", key)}
}

func (_c *MockCache_Get_Call[T]) Run(run func(key string)) *MockCache_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call[T]) Return(_a0 *T, _a1 bool) *MockCache_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call[T]) RunAndReturn(run func(string) (*T, bool)) *MockCache_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: key, value
func (_m *MockCache[T]) Save(key string, value T) {
	_m.Called(key, value)
}

// MockCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCache_Save_Call[T interface{}] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - key string
//   - value T
func (_e *MockCache_Expecter[T]) Save(key interface{}, value interface{}) *MockCache_Save_Call[T] {
	return &MockCache_Save_Call[T]{Call: _e.mock.On("Save", key, value)}
}

func (_c *MockCache_Save_Call[T]) Run(run func(key string, value T)) *MockCache_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(T))
	})
	return _c
}

func (_c *MockCache_Save_Call[T]) Return() *MockCache_Save_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Save_Call[T]) RunAndReturn(run func(string, T)) *MockCache_Save_Call[T] {
	_c.Run(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[T] {
	mock := &MockCache[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
