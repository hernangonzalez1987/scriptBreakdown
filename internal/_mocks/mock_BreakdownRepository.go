// Code generated by mockery v2.51.1. DO NOT EDIT.

package _mocks

import (
	context "context"

	entity "github.com/hernangonzalez1987/scriptBreakdown/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockBreakdownRepository is an autogenerated mock type for the BreakdownRepository type
type MockBreakdownRepository struct {
	mock.Mock
}

type MockBreakdownRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBreakdownRepository) EXPECT() *MockBreakdownRepository_Expecter {
	return &MockBreakdownRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockBreakdownRepository) Get(ctx context.Context, id string) (*entity.ScriptBreakdownResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.ScriptBreakdownResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ScriptBreakdownResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ScriptBreakdownResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ScriptBreakdownResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBreakdownRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBreakdownRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBreakdownRepository_Expecter) Get(ctx interface{}, id interface{}) *MockBreakdownRepository_Get_Call {
	return &MockBreakdownRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBreakdownRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockBreakdownRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBreakdownRepository_Get_Call) Return(_a0 *entity.ScriptBreakdownResult, _a1 error) *MockBreakdownRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBreakdownRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*entity.ScriptBreakdownResult, error)) *MockBreakdownRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, result
func (_m *MockBreakdownRepository) Save(ctx context.Context, result entity.ScriptBreakdownResult) error {
	ret := _m.Called(ctx, result)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScriptBreakdownResult) error); ok {
		r0 = rf(ctx, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBreakdownRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBreakdownRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - result entity.ScriptBreakdownResult
func (_e *MockBreakdownRepository_Expecter) Save(ctx interface{}, result interface{}) *MockBreakdownRepository_Save_Call {
	return &MockBreakdownRepository_Save_Call{Call: _e.mock.On("Save", ctx, result)}
}

func (_c *MockBreakdownRepository_Save_Call) Run(run func(ctx context.Context, result entity.ScriptBreakdownResult)) *MockBreakdownRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ScriptBreakdownResult))
	})
	return _c
}

func (_c *MockBreakdownRepository_Save_Call) Return(_a0 error) *MockBreakdownRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBreakdownRepository_Save_Call) RunAndReturn(run func(context.Context, entity.ScriptBreakdownResult) error) *MockBreakdownRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBreakdownRepository creates a new instance of MockBreakdownRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBreakdownRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBreakdownRepository {
	mock := &MockBreakdownRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
